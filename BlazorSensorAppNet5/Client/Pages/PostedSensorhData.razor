@page "/fetchposteddata"
@using BlazorSensorAppNet5.Shared
@inject HttpClient Http

<h1>Posted Sensor Data</h1>

<p>This component demonstrates fetching logged (submitted sensor) data from the server.</p>

@if (sensors == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <p>Last 10 in reverse order shown ...</p>
    <button class="btn btn-secondary" @onclick="Clear">Clear</button><br>
    <button class="btn btn-secondary" @onclick="Refresh">Refresh</button><br>
    <table class="t1">
        <thead>
            <tr>
                <th>Id</th>
                <th>No</th>
                <th>Sensor Type</th>
                <th>Timestamp</th>
                <th>Value</th>
                <th>State</th>
                <th>Values</th>
                <th>&nbsp;</th>
                <th>&nbsp;</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sensor in sensors)
            {
                <tr>
                    <td>@sensor.Id</td>
                    <td>@sensor.No</td>
                    <td>@sensor.SensorType</td>
                    <td>@sensor.DateTime</td>
                    @if (sensor.Value != (double)Sensor.iNull)
                    {
                        <td>@sensor.Value</td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                    }
                    @if (@sensor.SensorType == SensorType.sswitch)
                    {
                        <td>@sensor.State</td>
                    }
                    @if (sensor.Values != null)
                    {
                        <td>&nbsp;</td>
                        @if (@sensor.Values.Count() > 2)
                        {
                            <td>@sensor.Values[0]</td>
                            <td>@sensor.Values[1]</td>
                            <td>@sensor.Values[2]</td>
                        }
                     }

               </tr>
               @if (@sensor.environ != null)
                {
                    <tr>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>...</td>
                        <td>Temperature</td>
                        <td>@sensor.environ.Temperature</td>
                    </tr>
                     <tr>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>...</td>
                        <td>Hunidity</td>
                        <td>@sensor.environ.Humidity</td>

                    </tr>
                    <tr>
                        <td>&nbsp;</td>
                        <td>&nbsp;</td>
                        <td>...</td>
                        <td>Pressure</td>
                        <td>@sensor.environ.Pressure</td>
                    </tr>
                }
        }
        </tbody>
    </table>
}

@code {
    private List<Sensor> sensors;
    string Response = "";

        System.Threading.Timer timer;

    private  void SetClock(object stateInfo)
	{
        if (Response == "")
        {
            Refresh().GetAwaiter();
            StateHasChanged();
        }
	}
 
    void startTimer(int secs)
    {
        timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 0, secs*1000);
    }

    void stopTimer()
    {
        timer.Dispose();
    }
  

    protected override async Task OnInitializedAsync()
    {
        await Refresh();
        startTimer(1);
    }

     private async Task Clear()
    {
        string Result = "Busy";
        var result = await Http.PostAsJsonAsync<int>("sensor", 1);
        System.Diagnostics.Debug.WriteLine(result.StatusCode);
        Result = result.StatusCode.ToString();
        await Refresh();
    }

    private async Task Refresh()
    {
        Response = "Busy";
        var data = await Http.GetFromJsonAsync<Sensor[]>("PostedTelemetryLog");
        var sensors1 = new List<Sensor> ( data );
        sensors = (from s in sensors1
                   orderby s.DateTime descending
                   select s).Take(10).ToList();
        StateHasChanged();
        Response = "";
    }



}
