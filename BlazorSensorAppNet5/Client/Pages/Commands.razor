@page "/commands"
@using BlazorSensorAppNet5.Shared
@inject HttpClient client

<h1>Commands</h1>
<table>
    <tr><td colspan="2"><button class="btn btn-primary" @onclick="StartReads">Send Command:</button></td></tr>
     <tr><td>Type Command:&nbsp;</td><td><input type="text" @bind="@command"/></td></tr>
     <tr><td>Or Select Command:&nbsp;</td>
       <td>
           @if(@RegCmdz!= null)
{
    <select @onchange="DoStuff">
        @foreach (var template in RegCmdz)
        {
            <option value=@template>@template</option>
        }
    </select>
}
       </td></tr>
      <tr><td>Parameter:&nbsp;</td><td><input type="text" @bind="@value"/></td></tr>

        <tr><td colspan="2"><button class="btn btn-primary" @onclick="GetRegisteredCommands">Get Registered Commands for Device/button</button></td></tr>
</table>

<br />@((MarkupString)Response)

@if (commands != null)
{
    @if (commands.Count() != 0)
    {
        <h3>Commands Queue direct to Device</h3>
        <table class="t1">
            <tr>
            <th>Action</th>
            <th>Parameter</th>
            </tr>
        @foreach (var @cmd in @commands)
        {
             <tr>
                 <td>@cmd.Action</td>
                    @if (cmd.Parameter != iNull )
                    {
                        <td>@cmd.Parameter</td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                    }
            </tr>
        }
        </table>
    }
}

@code {
    private int currentCount = 0;
    private string command { get; set; } = "StartQ";
    private string value { get; set; } = "";
    bool run = true;
    string Response = "";
    List<Command> commands = null;
    int iNull = (int)BlazorSensorAppNet5.Shared.Sensor.iNull;
    string RegisteredCommands;
    List<string> RegCmdz = null;

    System.Threading.Timer timer;

    private  void SetClock(object stateInfo)
	{
        if (Response == "")
        {
            GetCommands().GetAwaiter();
            StateHasChanged();
        }
	}
 
    void startTimer(int secs)
    {
        timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 0, secs*1000);
    }

    void stopTimer()
    {
        timer.Dispose();
    }

    protected override async Task OnAfterRenderAsync( bool first)
    {
        await base.OnAfterRenderAsync(first);
        if (first)
        {
            
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetRegisteredCommands();
        Response = "";
        startTimer(1);
    }

    async Task DoStuff(ChangeEventArgs e)
    {
        command = e.Value.ToString();
        if (command != "Select")
        {
            await StartReads();
        }
    }

    private async Task StartReads()
    {
        Response = "Busy";
        int val;
        BlazorSensorAppNet5.Shared.Command cmd;
        if (!int.TryParse(value, out val))
            cmd = new BlazorSensorAppNet5.Shared.Command { Action = command };
        else
            cmd = new BlazorSensorAppNet5.Shared.Command { Action = command, Parameter = val };
        var response = await client.PostAsJsonAsync<BlazorSensorAppNet5.Shared.Command>("Commands2Device", cmd,null);
        command = "";
        value = "";
        cmd = null;
        string content = await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            System.Diagnostics.Debug.WriteLine("Sent OK");
            Response = $"Sent Ok<br/>{content}";
        }
        else
        {
            System.Diagnostics.Debug.WriteLine("Not OK: {0}",response.ReasonPhrase);
            Response = $"Not OK: {response.ReasonPhrase}";
            Response += $"<br/>{content}";
        }
        await GetCommands();
        Response = "";     
    }

    private async Task GetCommands()
    {
        var response = await client.GetFromJsonAsync<Command[]>("CommansdsDirectFromHub");
        if (response != null)
            commands = response.ToList();
        else
            commands = null;
    }

    private async Task GetRegisteredCommands()
    {
        BlazorSensorAppNet5.Shared.Command cmd = new BlazorSensorAppNet5.Shared.Command { Action = "LISTCOMMANDS" , Invoke = true};
        var response = await client.PostAsJsonAsync<BlazorSensorAppNet5.Shared.Command>("CommansdsDirectFromHub", cmd,null);
        RegisteredCommands = await response.Content.ReadAsStringAsync();
        RegisteredCommands = "Select," + RegisteredCommands;
        RegCmdz = RegisteredCommands.Split(',').ToList<string>();
    }



}
