
@page "/directdata/{sensortype}/{sensorvalue}"
@page "/directdata/{sensortype}/{sensorvalue}/{sensorvalue2}/{sensorvalue3}"

@using BlazorSensorAppNet5.Shared
@using System.Net.Http
@inject HttpClient Http

@inject NavigationManager NavigationManager

<h1>Send Sensor Values to IoTHub</h1>

@if (!SensorAvailable)
{
    <p><em>Loading...</em></p>
}
else
{

    <table>
        <tr>
            <td align="right" valign="middle"><label><i>No:&nbsp;</i></label></td>
            <td valign="middle"><b>@_Sensor.No</b></td>
        </tr>
        <tr>
            <td align="right" valign="middle"><label><i>Id:&nbsp;</i></label></td>
            <td valign="middle"><b>@_Sensor.Id</b></td>
        </tr>
        <tr>
            <td align="right" valign="middle"><label><i>TimeStamp:&nbsp;</i></label></td>
            <td valign="middle"><b>@_Sensor.TimeStamp</b></td>
        </tr>
        <tr>
            <td align="right" valign="middle"><label><i>Sensor Type:&nbsp;</i></label></td>
            <td valign="middle">
                <label>@_Sensor.SensorType</label>
            </td>
        </tr>
        @if (_Sensor.SensorType == SensorType.accelerometer)
        {
            <tr>
                <td align="right" valign="middle" width="50px"><label><i>Accelerometer (X,Y,Z):&nbsp;</i></label></td>
                <td valign="middle" width="50px">&nbsp;<label>@value1</label></td>
                <td valign="middle" width="50px">&nbsp;<label>@value2</label></td>
                <td valign="middle" width="50px">&nbsp;<label>@value3</label></td>
            </tr>
        }
        else if (_Sensor.SensorType == SensorType.environment)
        {
            <tr>
                <td align="right" valign="middle" width="50px"><label><i>Environment:&nbsp;</i></label></td>
                <td valign="middle" width="50px">&nbsp;<label>@value1</label></td>
                <td valign="middle" width="50px">&nbsp;<label>@value2</label></td>
                <td valign="middle" width="50px">&nbsp;<label>@value3</label></td>
            </tr>
        }
        else if (_Sensor.SensorType == SensorType.sswitch)
        {

            <tr>
                <td align="right" valign="middle"><label for="Switch"><i>Switch Value:&nbsp;</i></label></td>
                <td valign="middle"><label>@_Sensor.State</label>></td>
            </tr>
        }
        else
        {

            <tr>
                <td align="right" valign="middle"><label for="Value"><i>Value:&nbsp;</i></label></td>
                <td valign="middle"><label>@_Sensor.Value </label></td>
            </tr>
        }

        <tr><td align="right"><i>Result:&nbsp:</i></td><td><font color="Blue"><b>@Result</b></font></td></tr>
    </table>

}




@code {

    [Parameter]
    public string sensortype { get; set; }
    [Parameter]
    public string sensorvalue { get; set; }
    [Parameter]
    public string sensorvalue2 { get; set; }
    [Parameter]
    public string sensorvalue3 { get; set; }


    double? value1 = null;
    double? value2 = null;
    double? value3 = null;

    bool accelerometer { get; set; } = false;
    string Result = "Loading";

    private bool SensorAvailable { get; set; } = false;

    protected override async Task OnParametersSetAsync()
    {
        await base.OnParametersSetAsync();
        SetupSensor();
        await Send();
    }


    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        //Http.PostAsJsonAsync<bool>("Sensor", false).GetAwaiter();
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
        NavigationManager.LocationChanged -= LocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavigationManager.LocationChanged += LocationChanged;
    }

    void SetupSensor()
    {
        //var result = await Http.PostAsJsonAsync<bool>("Sensor", true);

        Guid guid = Guid.NewGuid();
        long TimeStamp = DateTime.Now.Ticks;
        _Sensor = new Sensor { Id = guid.ToString(), TimeStamp = TimeStamp, Value=-1 };
        _Sensor.SensorType = SensorType.accelerometer;
        _Sensor.No = Sensor.Count;
        if (!string.IsNullOrEmpty(sensortype))
        {
            object obj;
            if (Enum.TryParse(typeof(SensorType), sensortype, true, out obj))
            {
                _Sensor.SensorType = (SensorType)obj;
            }
            //SensorType? val = (SensorType)Enum.Parse(typeof(SensorType), sensortype);
            //if (val != null)
            //    _Sensor.SensorType = (SensorType)val;
        }
        _Sensor.Value = -1;
        if (!string.IsNullOrEmpty(sensorvalue))
        {
            double val;
            if (double.TryParse(sensorvalue, out val))
                _Sensor.Value = val;
            else
                _Sensor.Value = 0.9;
        }
        if (_Sensor.SensorType == SensorType.accelerometer) 
        {
            value1 = _Sensor.Value;
            _Sensor.Value = 0;
            if (!string.IsNullOrEmpty(sensorvalue2))
            {
                double val;
                if (double.TryParse(sensorvalue2, out val))
                    value2 = val;
                else
                    value2 = 0.0;
            }
            if (!string.IsNullOrEmpty(sensorvalue3))
            {
                double val;
                if (double.TryParse(sensorvalue3, out val))
                    value3 = val;
                else
                    value3 = 0.0;
            }
        }
        else if  (_Sensor.SensorType == SensorType.environment)
        {
            value1 = _Sensor.Value;
            _Sensor.Value = 0;
            if (!string.IsNullOrEmpty(sensorvalue2))
            {
                double val;
                if (double.TryParse(sensorvalue2, out val))
                    value2 = val;
                else
                    value2 = 0.0;
            }
            if (!string.IsNullOrEmpty(sensorvalue3))
            {
                double val;
                if (double.TryParse(sensorvalue3, out val))
                    value3 = val;
                else
                    value3 = 0.0;
            }
        }
        SensorAvailable = true;
    }

    private Sensor _Sensor { get; set; }

    private async Task Send()
    {
        Result = "Busy";
        StateHasChanged();
        //accelerometer = !accelerometer;
        //StateHasChanged();
        if (_Sensor.SensorType == SensorType.accelerometer) 
        {
            _Sensor.Value = Sensor.iNull;
            _Sensor.Values = new List<double> { (double)value1, (double)value2, (double)value3 };
        }
        else if (_Sensor.SensorType == SensorType.environment)
        {
            _Sensor.Value = Sensor.iNull;
            _Sensor.environ = new Environ { Temperature =(double)value1, Humidity =  (double)value2, Pressure = (double)value3 };
        }
        Guid guid = Guid.NewGuid();
        long TimeStamp = DateTime.Now.Ticks;
        _Sensor.No = ++Sensor.Count;
        _Sensor.Id = guid.ToString();
        _Sensor.TimeStamp = TimeStamp;
        var result = await Http.PostAsJsonAsync<Sensor>("Sensor", _Sensor);
        System.Diagnostics.Debug.WriteLine(result.StatusCode);
        Result = result.StatusCode.ToString();
        StateHasChanged();
    }


    private void Fred(MouseEventArgs mouseEventArgs)
    {
        //accelerometer = !accelerometer;
        StateHasChanged();
    }

}
