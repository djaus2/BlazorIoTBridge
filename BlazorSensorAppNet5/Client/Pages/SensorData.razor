@page "/sendsensordata"
@page "/sendsensordata/{sensortype}/{sensorvalue}"
@page "/sendsensordata/{sensortype}/{sensorvalue}/{sensorvalue2}/{sensorvalue3}"
@using BlazorSensorAppNet5.Shared
@using System.Net.Http
@using static System.Random
@inject HttpClient Http

@inject NavigationManager NavigationManager

<h1>Send Sensor Values to IoT Hub</h1>

@if (!SensorAvailable)
{
    <p><em>Loading...</em></p>
}
else
{

    <EditForm OnValidSubmit=@Send Model="@_Sensor">
        <DataAnnotationsValidator />
        <ValidationSummary />
        <table>
            <tr>
                <td align="right" valign="middle"><b><i>No:&nbsp;</i></b></td>
                <td valign="middle"><b>@_Sensor.No</b></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><b><i>Id:&nbsp;</i></b></td>
                <td valign="middle"><b>@_Sensor.Id</b></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><b><i>TimeStamp:&nbsp;</i></b></td>
                <td valign="middle"><b>@_Sensor.TimeStamp</b></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><b><i>Sensor Type:&nbsp;</i></b></td>
                <td valign="middle">
                    <InputSelect @bind-Value="_Sensor.SensorType">
                        @foreach (var typ in Enum.GetValues(typeof(SensorType)))
                            {
                            <option value="@typ">@typ</option>
                            }
                    </InputSelect>
                </td>
            </tr>
            @if (_Sensor.SensorType == SensorType.accelerometer)
            {
                <tr>
                    <td align="right" width="50px" valign="middle"><b><i>Accelerometer (X,Y,Z):&nbsp;</i></b></td>
                    <td valign="middle" width="100px">&nbsp;<InputNumber @bind-Value=@value1 class="form-control" id="Value1" PlaceHolder="X value." /></td>
                    <td valign="middle" width="100px">&nbsp;<InputNumber @bind-Value=@value2 class="form-control" id="Value2" PlaceHolder="Y value." /></td>
                    <td valign="middle" width="100px">&nbsp;<InputNumber @bind-Value=@value3 class="form-control" id="Value3" PlaceHolder="Z value." /></td>
                </tr>
            }
            else if (_Sensor.SensorType == SensorType.environment)
            {
                <tr>
                    <td align="right" width="50px" valign="middle"><b><i>Environment:&nbsp;</i></b></td>
                    <td valign="middle" width="100px">&nbsp;<InputNumber @bind-Value=@value1 class="form-control" id="Value4" PlaceHolder="Temperature value." /></td>
                    <td valign="middle" width="100px">&nbsp;<InputNumber @bind-Value=@value2 class="form-control" id="Value5" PlaceHolder="Humidity value." /></td>
                    <td valign="middle" width="100px">&nbsp;<InputNumber @bind-Value=@value3 class="form-control" id="Value6" PlaceHolder="Pressure value." /></td>
                </tr>
            }
            else if (_Sensor.SensorType == SensorType.sswitch)
            {

                <tr>
                    <td align="right" valign="middle"><b><i>Value:&nbsp;</i></b></td>
                    <td valign="middle"><InputCheckbox @bind-Value=@_Sensor.State class="form-control" id="Switch" PlaceHolder="Switch off and on" /></td>
                </tr>
            }
            else
            {

                <tr>
                    <td align="right" valign="middle"><b><i>Value:&nbsp;</i></b></td>
                    <td valign="middle"><InputNumber @bind-Value=@_Sensor.Value class="form-control" id="Value" PlaceHolder="Please enter a decimal value." /></td>
                </tr>
            }

            <tr>
                <td align="right" valign="middle"><b><i>Period (in sec):&nbsp;</i></b></td>
                <td valign="middle"><InputNumber @bind-Value=@Period class="form-control" id="Value" PlaceHolder="Please enter period between messages in seconds." /></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><b><i>Number To Send:&nbsp;</i></b></td>
                <td valign="middle"><InputNumber @bind-Value=@NumToSend class="form-control" id="Value" PlaceHolder="Please enter number of messages to send." /></td>
            </tr>
            <tr>
                <td align="right" valign="middle"><b><i>Use Random Sensor Type:</i></b></td>
                <td align="left" valign="middle"><InputCheckbox @bind-Value=@SensorTypeIsRandom align="left" width="40" class="form-control" id="SensorTypeIsRandom" PlaceHolder="Is Random" /></td>
            </tr>
            <tr>
                <td align="left" valign="middle"><b>Result:</b>&nbsp:<font color="Blue">@Result</font></td>
                <td align="left" valign="middle"><b>Number Sent:</b>&nbsp;<font color="blue">@numSent</font></td>
            </tr>
            <tr>
                <td><input type="submit" class="btn btn-primary" value="Send" /></td>
            </tr>
        </table>
    </EditForm>

    <p>
        
    </p>
    <p>
        <label><i>To do multiple sends, set <b>Number To Send</b> greater than one. Set period >0s as well.</i></label>
    </p>
    <p>Note: <i><b>Use Random Sensor Type</b>, if true, only applies to multiple sends.</i></p>


}

@code
{
    [Parameter]
    public string sensortype { get; set; }
    [Parameter]
    public string sensorvalue { get; set; }
    [Parameter]
    public string sensorvalue2 { get; set; }
    [Parameter]
    public string sensorvalue3 { get; set; }

    public int numSent = 0;
    public int Period = 1;
    public int NumToSend = 5;
    public bool SensorTypeIsRandom = true;

    //@onselectionchange="@(() => { StateHasChanged(); })"


    double? value1 = null;
    double? value2 = null;
    double? value3 = null;

    bool accelerometer { get; set; } = false;
    string Result = "Loading";

    private bool SensorAvailable { get; set; } = false;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            await base.OnAfterRenderAsync(firstRender);
    }


    void LocationChanged(object sender, LocationChangedEventArgs e)
    {
        string navigationMethod = e.IsNavigationIntercepted ? "HTML" : "code";
        //Http.PostAsJsonAsync<bool>("Sensor", false).GetAwaiter();
        System.Diagnostics.Debug.WriteLine($"Notified of navigation via {navigationMethod} to {e.Location}");
        NavigationManager.LocationChanged -= LocationChanged;
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        NavigationManager.LocationChanged += LocationChanged;

        //var result = await Http.PostAsJsonAsync<bool>("Sensor", true);
        Result = "Started";
        Guid guid = Guid.NewGuid();
        long TimeStamp = DateTime.Now.Ticks;
        _Sensor = new Sensor { Id = guid.ToString(), TimeStamp = TimeStamp };
        SensorAvailable = true;
        StateHasChanged();
        return;
        /*
        Guid guid = Guid.NewGuid();
        long TimeStamp = DateTime.Now.Ticks;
        _Sensor = new Sensor { Id = guid.ToString(), TimeStamp = TimeStamp };
        _Sensor.SensorType = SensorType.temperature;
        _Sensor.No = Sensor.Count;
        if (!string.IsNullOrEmpty(sensortype))
        {
            object obj;
            if (Enum.TryParse(typeof(SensorType), sensortype, true, out obj))
            {
                _Sensor.SensorType = (SensorType)obj;
            }
        }
        _Sensor.Value = 0.0;
        if (!string.IsNullOrEmpty(sensorvalue))
        {
            double val;
            sensorvalue = sensorvalue.ToUpper().Replace('X', '.');
            if (double.TryParse(sensorvalue, out val))
                _Sensor.Value = val;
        }
        if ((_Sensor.SensorType == SensorType.accelerometer) || (_Sensor.SensorType == SensorType.environment))
        {
            value1 = _Sensor.Value;
            _Sensor.Value = 0;

            if (!string.IsNullOrEmpty(sensorvalue2))
            {
                double val;
                sensorvalue2 = sensorvalue2.ToUpper().Replace('X', '.');
                if (double.TryParse(sensorvalue2, out val))
                    value2 = val;
                else
                    value2 = 0.0;
            }
            if (!string.IsNullOrEmpty(sensorvalue3))
            {
                double val;
                sensorvalue3 = sensorvalue3.ToUpper().Replace('X', '.');
                if (double.TryParse(sensorvalue3, out val))
                    value3 = val;
                else
                    value3 = 0.0;
            }
        }
        SensorAvailable = true;
        StateHasChanged();
        */
    }

    private Sensor _Sensor { get; set; }

    private async Task Send()
    {
        Sensor Sensor = null;
        if (NumToSend == 1)
        {
            numSent = 0;
            StateHasChanged();
            if ((_Sensor.SensorType == SensorType.accelerometer) || (_Sensor.SensorType == SensorType.environment))
            {
                _Sensor.Values = new List<double> { (double)value1, (double)value2, (double)value3 };
            }
            Guid guid = Guid.NewGuid();
            long TimeStamp = DateTime.Now.Ticks;
            _Sensor.No = ++Sensor.Count;
            _Sensor.Id = guid.ToString();
            _Sensor.TimeStamp = TimeStamp;
            Sensor = _Sensor;
            await _Send(Sensor);
            numSent = 1;
            StateHasChanged();
        }
        else
        {
            try
            {
                double val1;
                double val2;
                double val3;
                GenFu.Configure<Sensor>()
                .Fill(b => b.Id, () => { return GetGuid(); })
                .Fill(b => b.TimeStamp, () => { return GeTimeStamp(); })
                .Fill(p => p.No)
                .WithinRange(1, 100);
                var Sensors = GenFu.ListOf<Sensor>(NumToSend);
                Random random = new Random();
                for (int i = 0; i < NumToSend; i++)
                {
                    numSent = i;
                    StateHasChanged();
                    Sensor = Sensors[i];
                    if (!SensorTypeIsRandom)
                        Sensor.SensorType = _Sensor.SensorType;
                    Sensor.No = i;
                    double maximum = 0;
                    double minimum = 0;

                    switch (Sensor.SensorType)
                    {
                        case SensorType.temperature:
                            maximum = 30;
                            minimum = 10;
                            break;
                        case SensorType.pressure:
                            maximum = 870;
                            minimum = 1084;
                            break;
                        case SensorType.humidity:
                            maximum = 0;
                            minimum = 100;
                            break;
                        case SensorType.luminosity:
                            maximum = 0;
                            minimum = 300;
                            break;
                        case SensorType.sswitch:
                            var val = random.NextDouble() * 10;
                            Sensor.Value = -1;
                            Sensor.State = (val > 5.0);
                            break;
                    }
                    if ((maximum + minimum) != 0)
                        Sensor.Value = random.NextDouble() * (maximum - minimum) + minimum;

                    maximum = 0;
                    minimum = 0;
                    Sensor.Values = null;
                    switch (Sensor.SensorType)
                    {

                        case SensorType.accelerometer:
                            Sensor.Value = -1; //Acts as null
                            maximum = 10;
                            minimum = 0;
                            val1 = random.NextDouble() * (maximum - minimum) + minimum;
                            val2 = random.NextDouble() * (maximum - minimum) + minimum;
                            val3 = random.NextDouble() * (maximum - minimum) + minimum;
                            Sensor.Values = new List<double> { val1, val2, val3 };
                            break;
                        case SensorType.environment:
                            Sensor.Value = -1; // Acts as null
                            maximum = 30;
                            val1 = random.NextDouble() * (maximum - minimum) + minimum;
                            maximum = 870;
                            minimum = 1084;
                            val2 = random.NextDouble() * (maximum - minimum) + minimum;
                            maximum = 0;
                            minimum = 100;
                            val3 = random.NextDouble() * (maximum - minimum) + minimum;
                            Sensor.environ = new Environ ( val1, val2, val3 );
                            break;
                    }

                    await _Send(Sensor);
                    if (i != NumToSend - 1)
                        await Task.Delay(TimeSpan.FromSeconds(Period));
                }
                numSent = NumToSend;
                StateHasChanged();
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine(ex.Message);
            }
        }
    }

    private string GetGuid()
    {
        return Guid.NewGuid().ToString();
    }

    private long GeTimeStamp()
    {
        return DateTime.Now.Ticks;
    }


    private async Task _Send(Sensor sensor)
    {
        _Sensor = sensor;
        Result = "Busy";
        StateHasChanged();
        ////accelerometer = !accelerometer;
        ////StateHasChanged();
        //if ((_Sensor.SensorType == SensorType.accelerometer) || (_Sensor.SensorType == SensorType.environment))
        //{
        //    _Sensor.Values = new List<double> { (double)value1, (double)value2, (double)value3 };
        //}
        //Guid guid = Guid.NewGuid();
        //long TimeStamp = DateTime.Now.Ticks;
        //_Sensor.No = ++Sensor.Count;
        //_Sensor.Id = guid.ToString();
        //_Sensor.TimeStamp = TimeStamp;
        var result = await Http.PostAsJsonAsync<Sensor>("Sensor", sensor);
        System.Diagnostics.Debug.WriteLine(result.StatusCode);
        string  res1 = result.StatusCode.ToString();
        string  res2 = await result.Content.ReadAsStringAsync();
        Result = $"{res1}-{res2}";
        StateHasChanged();
    }

    private void Fred(MouseEventArgs mouseEventArgs)
    {
        //accelerometer = !accelerometer;
        StateHasChanged();
    }

}
