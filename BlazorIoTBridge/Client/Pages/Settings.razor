@page "/settings"
@using BlazorIoTBridge.Shared
@using System.IO;
@using Newtonsoft.Json
@inject HttpClient client
@inject IJSRuntime JSRuntime

<h1>Hello, world!</h1>

Welcome to your new app.


<h1>Local Storage!</h1>



 @if (model != null)
{
    <EditForm Model="model">
        <table width="100%" border="0">

            <HubValue @bind-BindingValue="model.DeviceGuid" PropertyName="DeviceGuid"  />
            <HubValue @bind-BindingValue="model.IOTHUB_DEVICE_CONN_STRING"  PropertyName="IOTHUB_DEVICE_CONN_STRING"  />
            <HubValue @bind-BindingValue="model.IOTHUB_HUB_CONN_STRING"  PropertyName="IOTHUB_HUB_CONN_STRING"  />
            <HubValue @bind-BindingValue="model.SERVICE_CONNECTION_STRING"  PropertyName="SERVICE_CONNECTION_STRING"  />
            <HubValue @bind-BindingValue="model.EVENT_HUBS_CONNECTION_STRING"  PropertyName="EVENT_HUBS_CONNECTION_STRING"  />
            <HubValue @bind-BindingValue="model.SHARED_ACCESS_KEY_NAME"  PropertyName="SHARED_ACCESS_KEY_NAME"  />
            <HubValue @bind-BindingValue="model.HUB_NAME"  PropertyName="HUB_NAME"  /> 
            <HubValue @bind-BindingValue="model.DEVICE_NAME"  PropertyName="DEVICE_NAME"  />
            <HubValue @bind-BindingValue="model.SYMMETRIC_KEY"  PropertyName="SYMMETRIC_KEY"  />
            <HubValue @bind-BindingValue="model.EVENT_HUBS_SAS_KEY"  PropertyName="EVENT_HUBS_SAS_KEY"  />
            <HubValue @bind-BindingValue="model.EVENT_HUBS_COMPATIBILITY_PATH"  PropertyName="EVENT_HUBS_COMPATIBILITY_PATH"  />
            <HubValue @bind-BindingValue="model.EVENT_HUBS_COMPATIBILITY_ENDPOINT"  PropertyName="EVENT_HUBS_COMPATIBILITY_ENDPOINT"  />
        </table>


        <textarea rows="@Rows" cols="@Cols"
              @bind-value="@model.Txt"
              @bind-value:event="oninput" />
     </EditForm>
}


    <button class="btn btn-secondary" @onclick="Paste">Paste</button>
    <button class="btn btn-secondary" @onclick="ScanTxt">Scan</button>
    <button class="btn btn-secondary" @onclick="Json">From Json</button>
    <button class="btn btn-secondary" @onclick="Register">Register</button>
<br />@((MarkupString)Response)
<br /> <button class="btn btn-secondary" @onclick="Toggle">Toggle Telemetry Send Mode</button>
<br />@((MarkupString)Mode)

@code {

    int Rows = 1;
    int Cols = 100;
    public static Parameters parameters;

    public Info model { get; set; }
    public string Response = "";


    public async Task Register()
    {
            var response = await client.PostAsJsonAsync<Info>("Info", model, null);

            var json = JsonConvert.SerializeObject(model, Formatting.None);
            
            string content = ""; // await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                System.Diagnostics.Debug.WriteLine("Sent OK");
                Response = $"Sent Settings Ok<br/>{content}";
            }
            else
            {
                content = response.ReasonPhrase;
                System.Diagnostics.Debug.WriteLine("Not OK: {0}", response.ReasonPhrase);
                Response = $"Not OK: {(int)response.StatusCode}";
                Response += $"<br/>{content}";
            }
    }

    public  void  ScanTxt()
    {
        parameters = new  BlazorIoTBridge.Shared.Parameters();
        //model = new Info();
        using (StringReader sr = new StringReader(model.Txt))
        {
            string line;
            while ((line = sr.ReadLine()) != null)
            {
                line = line.Trim();
                if (!string.IsNullOrEmpty(line))
                {
                    // Remove number at start
                    string[] parts = line.Split(":");
                    if (parts.Length < 2)
                        continue;
                    if (parts.Length > 2)
                    {
                        parts[1] = line.Substring(parts[0].Length + 1);
                    }
                    {
                        string name = parts[0].Replace("\"", "").Trim();
                        if (!string.IsNullOrEmpty(line))
                        {
                            string val = parts[1].Trim();
                            if (string.IsNullOrEmpty(val))
                                continue;
                            if (val[val.Length-1]==',')
                                val = val.Substring(0,val.Length-1);
                            val = val.Replace("\"", "").Trim();
                            if (!string.IsNullOrEmpty(val))
                            {
                                System.Diagnostics.Debug.WriteLine("{0} {1}", name, val);
                                switch (name.ToUpper())
                                {
                                     case "DEVICE_GUID":
                                        model.DeviceGuid = val;
                                        break;
                                     case "SHARED_ACCESS_KEY_NAME":
                                        model.SHARED_ACCESS_KEY_NAME = val;
                                        break;
                                    case "HUB_NAME":
                                        model.HUB_NAME = val;
                                        break;
                                    case "DEVICE_NAME":
                                        model.DEVICE_NAME = val;
                                        break;
                                    case "IOTHUB_DEVICE_CONN_STRING":
                                        model.IOTHUB_DEVICE_CONN_STRING = val;
                                        break;
                                     case "IOTHUB_HUB_CONN_STRING":
                                        model.IOTHUB_HUB_CONN_STRING = val;
                                        break;
                                     case "SERVICE_CONNECTION_STRING":
                                        model.SERVICE_CONNECTION_STRING = val;
                                        break;
                                     case "EVENT_HUBS_COMPATIBILITY_PATH":
                                        model.EVENT_HUBS_COMPATIBILITY_PATH = val;
                                        break;        
                                     case "EVENT_HUBS_COMPATIBILITY_ENDPOINT":
                                        model.EVENT_HUBS_COMPATIBILITY_ENDPOINT	 = val;
                                        break;
                                      case "EVENT_HUBS_SAS_KEY":
                                        model.EVENT_HUBS_SAS_KEY = val;
                                        break;
                                     case "EVENT_HUBS_CONNECTION_STRING":
                                        model.EVENT_HUBS_CONNECTION_STRING = val;
                                        break;
                                     case "SYMMETRIC_KEY":
                                        model.SYMMETRIC_KEY = val;
                                        break;

                                }
                            }
                        }
                    }
                }
            }
        }
        parameters.DeviceGuid = model.DeviceGuid;
        parameters.EventHubName = model.EVENT_HUBS_COMPATIBILITY_PATH;
        parameters.EventHubCompatibleEndpoint = model.EVENT_HUBS_COMPATIBILITY_PATH;
        parameters.EventHubConnectionString = model.EVENT_HUBS_CONNECTION_STRING;
        parameters.EventHubName = model.HUB_NAME;
        parameters.SharedAccessKey = model.SHARED_ACCESS_KEY_NAME;
        BlazorIoTBridge.Shared.Parameters._Parameters = parameters;
        StateHasChanged();
  }

  public async Task Paste()
  {
        if (model == null)
            model = new Info();
        model.Txt = await JSRuntime.InvokeAsync<string>("clipboardCopy.readText");
        StateHasChanged();
  }

    public void Json()
    {
        string json = model.Txt;
        model = new Info();
        //    string json = JsonConvert.SerializeObject(model, Formatting.Indented);
        var model1 = JsonConvert.DeserializeObject<Info>(json);
        model.DeviceGuid = model1.DeviceGuid;
        StateHasChanged();
    }


    bool IsDirectMode = false;

    string Mode {
        get
        {
            if (IsDirectMode)
                return "Send Telemetry direct to hub";
            else
                return "Send Telemetry via this service";

        }
    }
  
  public async Task Toggle()
  {
        string command = "Send Telemetry direct to hub";
        IsDirectMode = !IsDirectMode;
        if (!IsDirectMode)
            command = "Send Telemetry via here";
        var cmd = new Command { Id = model.DeviceGuid, Action = command };
        var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("Commands2Device", cmd, null);

  }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            ScanTxt();
        }
  
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //model = new Info();
        //model.DeviceGuid = "6513d5ed-c0f2-4346-b3fa-642c48fd66a5";
        model = new Info();
        model.Txt = "";
        StateHasChanged();

    }

}
