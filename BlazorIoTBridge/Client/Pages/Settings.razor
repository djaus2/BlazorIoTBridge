@page "/settings"
@using BlazorIoTBridge.Shared
@using System.IO;
@using Newtonsoft.Json
@inject HttpClient client
@inject IJSRuntime JSRuntime

<h1>Device IoT Hub Settings</h1>

 @if (model != null)
{
    <EditForm Model="model">
        <table width="100%" border="0">
	<col style="width:25%">
	<col style="width:50%">
    <col style="width:25%">
    <tr><td align=right><b><font color="blue">Select Device:&nbsp;</font></b></td>
    <td colspan="2">
                    @if (@DeviceIds != null)
                    {
                        <select @onchange="OnSelectedId"  >
                            <option value=""><i>Select</i></option>

                            @foreach (var dev in DeviceIds)
                            {
                                <option value=@dev><b>@dev</b></option>
                            }
                        </select>
                    }
    </td></tr>
<tr>
<td  align=right><b><i><small><font color="blue">Id: DEVICE GUID</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.DeviceGuid"/></td>
</tr>
<tr><td colspan=3><i><b>Nb:</b>The Id needs to entered in appsettings.json in the Serial2Blazor app and the D2C app.</i></td></tr>
<tr>
<td  align=right><b><i><small><font color="blue">IOTHUB_DEVICE_CONN_STRING</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.IOTHUB_DEVICE_CONN_STRING"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">IOTHUB_HUB_CONN_STRING</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.IOTHUB_HUB_CONN_STRING"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">SERVICE_CONNECTION_STRING</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.SERVICE_CONNECTION_STRING"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">EVENT_HUBS_CONNECTION_STRING</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.EVENT_HUBS_CONNECTION_STRING"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">SHARED_ACCESS_KEY_NAME</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.SHARED_ACCESS_KEY_NAME"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">HUB_NAME</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.HUB_NAME"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">DEVICE_NAME</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.DEVICE_NAME"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">SYMMETRIC_KEY</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.SYMMETRIC_KEY"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">EVENT_HUBS_SAS_KEY</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.EVENT_HUBS_SAS_KEY"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">EVENT_HUBS_COMPATIBILITY_PATH</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.EVENT_HUBS_COMPATIBILITY_PATH"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">EVENT_HUBS_COMPATIBILITY_ENDPOINT</font></small></i></b></td>
<td colspan="2"><input class="form-control" @bind="@model.EVENT_HUBS_COMPATIBILITY_ENDPOINT"/></td>
</tr>
<tr>
<td  align=right><b><i><small><font color="blue">Fwd Telemetry thru Blazor Svr </font><i>(If set)</i></small></i></b></td>
<td colspan="2"><small>&nbsp;<InputCheckbox @bind-Value=model.FwdTelemetrythruBlazorSvr />&nbsp;<i>(If not set)</i> <font color="darkgreen">Forward Telemetry direct from the device</font><i>(i.e. from Serial2Blazor app)</i></small></td>
</tr>
`     </table>


        <textarea rows="@Rows" cols="@Cols"
              @bind-value="@model.Txt"
              @bind-value:event="oninput" />
     </EditForm>
}

    <button class="btn btn-secondary" @onclick="NewDevice">New Device</button>
    <button class="btn btn-secondary" @onclick="Paste">Paste as Text</button>
    <button class="btn btn-secondary" @onclick="ScanTxt">Scan Text</button>
    <button class="btn btn-secondary" @onclick="Json">Paste as Json</button>
    <button class="btn btn-secondary" @onclick="Register">Register/Update</button>
<br />@((MarkupString)Response)
<br /> <button class="btn btn-secondary" @onclick="Toggle">Toggle Telemetry Send Mode</button>
<br />@((MarkupString)Mode)

@code {

    int Rows = 1;
    int Cols = 100;
    public static Parameters parameters;

    public Info model { get; set; }
    public string Response = "";

    private string IdGuid = "";
    List<Guid> DeviceIds = null;


    public async Task Register()
    {
        if(DeviceIds.Contains(model.Id))
        {
           bool confirmed = await JSRuntime.InvokeAsync<bool>("confirm","Registry exists.\n Do you want to update it?");
            if (!confirmed)
                return;
        }
        var response = await client.PostAsJsonAsync<Info>("Info", model, null);

        var json = JsonConvert.SerializeObject(model, Formatting.Indented);
            
        string content = ""; // await response.Content.ReadAsStringAsync();
        if (response.IsSuccessStatusCode)
        {
            System.Diagnostics.Debug.WriteLine("Sent OK");
            Response = $"Sent Settings Ok<br/>{content}";
        }
        else
        {
            content = response.ReasonPhrase;
            System.Diagnostics.Debug.WriteLine("Not OK: {0}", response.ReasonPhrase);
            Response = $"Not OK: {(int)response.StatusCode}";
            Response += $"<br/>{content}";
        }
    }

    public  void  ScanTxt()
    {
        parameters = new  BlazorIoTBridge.Shared.Parameters();
        //model = new Info();
        using (StringReader sr = new StringReader(model.Txt))
        {
            string line;
            while ((line = sr.ReadLine()) != null)
            {
                line = line.Trim();
                if (!string.IsNullOrEmpty(line))
                {
                    // Remove number at start
                    string[] parts = line.Split(":");
                    int pl = parts.Length;
                    if (pl < 2)
                        continue;
                 @*   if (pl > 2)
                    {
                        parts[1] = line.Substring(parts[0].Length + 1);
                    }*@
    string name = parts[0].Replace("\"", "").Trim();
                    if (!string.IsNullOrEmpty(line))
                    {
                        string val = parts[1].Trim();
                        if (string.IsNullOrEmpty(val))
                            continue;
                        if (val[val.Length-1]==',')
                            val = val.Substring(0,val.Length-1);
                        val = val.Replace("\"", "").Trim();
                        if (!string.IsNullOrEmpty(val))
                        {
                            System.Diagnostics.Debug.WriteLine("{0} {1}", name, val);
                            switch (name.ToUpper())
                            {
                                case "DEVICE_GUID":
                                    model.DeviceGuid = val;
                                    break;
                                case "SHARED_ACCESS_KEY_NAME":
                                    model.SHARED_ACCESS_KEY_NAME = val;
                                    break;
                                case "HUB_NAME":
                                    model.HUB_NAME = val;
                                    break;
                                case "DEVICE_NAME":
                                    model.DEVICE_NAME = val;
                                    break;
                                case "IOTHUB_DEVICE_CONN_STRING":
                                    model.IOTHUB_DEVICE_CONN_STRING = val;
                                    break;
                                case "IOTHUB_HUB_CONN_STRING":
                                    model.IOTHUB_HUB_CONN_STRING = val;
                                    break;
                                case "SERVICE_CONNECTION_STRING":
                                    model.SERVICE_CONNECTION_STRING = val;
                                    break;
                                case "EVENT_HUBS_COMPATIBILITY_PATH":
                                    model.EVENT_HUBS_COMPATIBILITY_PATH = val;
                                    break;        
                                case "EVENT_HUBS_COMPATIBILITY_ENDPOINT":
                                    model.EVENT_HUBS_COMPATIBILITY_ENDPOINT	 = val;
                                    break;
                                case "EVENT_HUBS_SAS_KEY":
                                    model.EVENT_HUBS_SAS_KEY = val;
                                    break;
                                case "EVENT_HUBS_CONNECTION_STRING":
                                    model.EVENT_HUBS_CONNECTION_STRING = val;
                                    break;
                                case "SYMMETRIC_KEY":
                                    model.SYMMETRIC_KEY = val;
                                    break;
                                case "FwdTelemetrythruBlazorSvr":
                                    bool bval=true;
                                    switch (val.ToUpper())
                                    {
                                        case "FALSE":
                                            bval = false;
                                            break;
                                        case "0":
                                            bval = false;
                                            break;
                                        case "NO":
                                            bval = false;
                                            break;
                                    }
                                    model.FwdTelemetrythruBlazorSvr = bval;
                                    break;
                            }
                        }
                    }
                }
            }
        }
        parameters.DeviceGuid = model.DeviceGuid;
        parameters.EventHubName = model.EVENT_HUBS_COMPATIBILITY_PATH;
        parameters.EventHubCompatibleEndpoint = model.EVENT_HUBS_COMPATIBILITY_PATH;
        parameters.EventHubConnectionString = model.EVENT_HUBS_CONNECTION_STRING;
        parameters.EventHubName = model.HUB_NAME;
        parameters.SharedAccessKey = model.SHARED_ACCESS_KEY_NAME;
        BlazorIoTBridge.Shared.Parameters._Parameters = parameters;
        StateHasChanged();
  }

  public async Task Paste()
  {
        if (model == null)
            model = new Info();
        model.Txt = await JSRuntime.InvokeAsync<string>("clipboardCopy.readText");
        StateHasChanged();
  }

    public async Task Json()
    {
        string json = await JSRuntime.InvokeAsync<string>("clipboardCopy.readText"); //model.Txt;
        //json = json.Replace("\\r\\n", "");
       // model = new Info();
          //  json = JsonConvert.SerializeObject(model, Formatting.Indented);
        model = JsonConvert.DeserializeObject<Info>(json);
        //model.DeviceGuid = model1.DeviceGuid;
        StateHasChanged();
    }


    bool IsDirectMode = false;

    string Mode {
        get
        {
            if (IsDirectMode)
                return "Send Telemetry direct to hub";
            else
                return "Send Telemetry via this service";

        }
    }
  
  public async Task Toggle()
  {
        string command = "Send Telemetry direct to hub";
        IsDirectMode = !IsDirectMode;
        if (!IsDirectMode)
            command = "Send Telemetry via here";
        var cmd = new Command { Id = model.DeviceGuid, Action = command };
        var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("Commands2Device", cmd, null);

  }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);
        if (firstRender)
        {
            ScanTxt();
        }
  
    }

    void NewDevice()
    {
        model = new Info();
        model.Id = Guid.NewGuid();
    }


    async Task OnSelectedId(ChangeEventArgs e)
    {
        string Id = e.Value.ToString();
        model = new Info();
        StateHasChanged();
        model = await client.GetFromJsonAsync<Info>($"Info/{Id}", null);
        //ScanTxt();
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        //model = new Info();
        //model.DeviceGuid = "6513d5ed-c0f2-4346-b3fa-642c48fd66a5";
        model = new Info();
        model.Txt = "";

        var DeviceIdsArray = await client.GetFromJsonAsync<Guid[]>("Info");
        DeviceIds = new List<Guid>(DeviceIdsArray);
@*        if (DeviceIds != null)
            if (DeviceIds.Count() == 1)
                IdGuid = DeviceIds[0].ToString()*@;
        StateHasChanged();

    }

}
