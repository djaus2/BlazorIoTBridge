@page "/d2csensordata"
@using BlazorIoTBridge.Shared
@inject HttpClient Http
@using Newtonsoft.Json
@using Newtonsoft.Json.Converters;
@using System.Dynamic

<h1><font color="red">Device to Cloud Sensor Telemetry Data</font></h1>
<h4><i>Telemtry data sent from the device (or this app) as read from the IoT Hub's' D2C Default EventHub</i></h4>

<p>This does not <i>(in the main)</i> assume any model for the telemtry data.<br />It does not assume the Sensor model but interogates it in a Generic manner.<br />Only assumption is that there is a TimeStamp property.</p>

@if (LogMsgs == null)
{
    <p><em>Waiting/Loading...</em></p>
}
else
{
    <table class="t1" >
        @LogMsg
    </table>
}



@code {
    private List<Sensor> sensors = null; //new List<Sensor>();
    private List< System.Dynamic.ExpandoObject> messages;
    private List<string> messagesJson = null;
    private string msgraw;
  
    MarkupString  LogMsg = new MarkupString();

    List<TelemetryMsg> LogMsgs = new List<TelemetryMsg>();

    protected override async Task OnInitializedAsync()
    {

        await Refresh();
    }

     private async Task Clear()
    {
       /* string Result = "Busy";
        var result = await Http.PostAsJsonAsync<int>("sensor", 1);
       // Log(telemetryMsg,String.Format(result.StatusCode);
        Result = result.StatusCode.ToString();
        await Refresh();*/
    }


    private async Task Refresh()
    {
        List<TelemetryMsg> LogMsgs = new List<TelemetryMsg>();
        messagesJson = null;
        LogMsg = new MarkupString();
        msgraw = "";
        long lastTS = 0;
        string Result = "Busy";
        var data = await Http.GetFromJsonAsync<string[]>("D2CTelemetryLog");
        messagesJson = new List< string> ( data );
        foreach (var json in messagesJson)
        {
            TelemetryMsg telemetryMsg = new();
            Int64 TimeStamp = 0;
                //System.Dynamic.ExpandoObject}	dd =  {System.Dynamic.ExpandoObject} msg;
            dynamic message = JsonConvert.DeserializeObject<ExpandoObject>(json, new ExpandoObjectConverter());
                //long ts = message.TimeStamp;
                if (true) //(ts > lastTS)
                {
                    //lastTS = ts;;


                    foreach (var property in (IDictionary<String, Object>)message) 
                    {
                        if (!(property.Key == "TimeStamp"))
                            continue;
                        if (property.Value != null)
                        {
                            if (property.Value.GetType().Name == "Int64")
                            {
                                telemetryMsg.TimeStamp = (Int64)property.Value;
                                break;
                            }
                        }

                    }
                    Logg(telemetryMsg,"<h3><i><font color='red'>Telemetry</font></i></h2>");
                    foreach (var property in (IDictionary<String, Object>)message)
                    {
                        if (property.Value != null)
                        {
                            if (property.Value.GetType().Name == "ExpandoObject")
                            {
                                dynamic expandoValues = property.Value;

                                bool isNullOrEmpty = true;
                                if (expandoValues != null)
                                {
                                    foreach (var propertyExpando in (IDictionary<String, Object>)expandoValues)
                                    {
                                        if (isNullOrEmpty)
                                        {
                                            Log(telemetryMsg, property.Key, " ... has properties:", property.Value.GetType());
                                            isNullOrEmpty = false;
                                        }
                                        Log(telemetryMsg,"",string.Format("{0,18} : {1,-19}",propertyExpando.Key, propertyExpando.Value), propertyExpando.Value.GetType());
                                    }
                                    if (isNullOrEmpty)
                                        Log (telemetryMsg,property.Key, " ... has no properties", property.Value.GetType());
                                }
                                else
                                    Log(telemetryMsg, property.Key, " ...is null", property.Value.GetType());

                            }
                            else if (property.Value.GetType().Name == "List`1") // i.e. System.Collections.Generic.List<T> where T is a simple Value Type ??
                            {
                                dynamic values = property.Value;
                                if (values.Count != 0)
                                {
                                    string listType = values[0].GetType().FullName;
                                    if (listType == 24.3D.GetType().FullName)
                                    {
                                        Log(telemetryMsg,property.Key," ... is List of double:");
                                        foreach (var x in values)
                                        {
                                            double xx = (double)x;
                                            Log(telemetryMsg, "", xx, xx.GetType());
                                        }
                                    }
                                    else if (listType == 137.GetType().FullName)
                                    {
                                        Log(telemetryMsg, property.Key, " ... is List of Int64:");
                                        foreach (var x in values)
                                        {
                                            int xx = (int)x;
                                            Log(telemetryMsg, "", xx, xx.GetType());
                                        }
                                    }
                                    else if (listType == "string".GetType().FullName)
                                    {
                                        Log(telemetryMsg,property.Key," ... is List of string:");
                                        foreach (var x in values)
                                        {
                                            string xx = (string)x;
                                            Log(telemetryMsg, "", xx, xx.GetType());
                                        }
                                    }
                                    else if (listType == false.GetType().FullName)
                                    {
                                        Log(telemetryMsg,property.Key," ... is List of bool:");
                                        foreach (var x in values)
                                        {
                                            bool xx = (bool)x;
                                            Log(telemetryMsg, "", xx, xx.GetType());
                                        }
                                    }
                                    else if (listType == DateTime.Now.GetType().FullName)
                                    {
                                        Log(telemetryMsg,property.Key," ... is List of DateTime:");
                                        foreach (var x in values)
                                        {
                                            DateTime xx = (DateTime)x;
                                            Log(telemetryMsg, "", xx, xx.GetType());
                                        }
                                    }
                                    else
                                    {
                                        int num = values.Count;
                                        Log(telemetryMsg,String.Format("List is of more complex type: {0}. Number of elements: {1}", listType, num));
                                    }
                                }
                                else
                                    Log(telemetryMsg,property.Key, "Empty List of double");
                            }
                            else if (property.Value.GetType().Name == "121345".GetType().Name)
                            {
                                Guid guid;
                                if (Guid.TryParse((string)property.Value, out guid))
                                {
                                    Log(telemetryMsg,property.Key, property.Value,"System.Guid");
                                }
                                else
                                    Log(telemetryMsg, property.Key, property.Value, property.Value.GetType());
                            }
                           else
			                {
                                if (property.Value.GetType().Name == "Double")
                                {
                                    // Skip null integers. -1 is used as Json value can't be null
                                    double vald = (double)property.Value;
                                    if (vald == Sensor.dNull)
                                        continue;
                                }
                                Log(telemetryMsg,property.Key, property.Value, property.Value.GetType()); //, property.Value.GetType()); //, property.Value.GetType());
			                }
                        }
                    }
                    Logg(telemetryMsg,"&nbsp;");
                    LogMsgs.Add(telemetryMsg);
                    /*Log(telemetryMsg,String.Format("\tApplication properties (set by device):");
                    foreach (KeyValuePair<string, object> prop in partitionEvent.Data.Properties)
                    {
                        PrintProperties(prop);
                    }

                    Log(telemetryMsg,String.Format("\tSystem properties (set by IoT Hub):");
                    foreach (KeyValuePair<string, object> prop in partitionEvent.Data.SystemProperties)
                    {
                        PrintProperties(prop);
                    }*/
                }

        }
        string lo = "";
        var inReverseLogs = LogMsgs.OrderBy(e => e.TimeStamp).Reverse();
        var first10Logs = inReverseLogs.Take(10);
        foreach (var tel in first10Logs)
        {
           lo += "\n" + tel.msgraw;
        }
        LogMsg = new MarkupString(lo);
        StateHasChanged();
    }


    void Logg(TelemetryMsg telemetryMsg,  string msg)
    {
        string row =  "<tr><td colspan=\"3\">"  + msg +"</td></tr>\n";
        telemetryMsg.msgraw += row;
    }
    void Log(TelemetryMsg telemetryMsg,object omsg)
    {
        string msg = string.Format("{0}",omsg);
        string row = "<tr>" + "<td>"  + msg + "</td>" + "</tr>\n";
        telemetryMsg.msgraw += row;
        StateHasChanged();
    }

    void Log(TelemetryMsg telemetryMsg,object  omsg, object omsg2)
    {
        string msg = string.Format("{0}",omsg);
        string msg2 = string.Format("{0}",omsg2);
        string row = "<tr>" + "<td>"  +  msg + "</td>" + "<td>" + msg2 + "</td>" + "</tr>\n";
        telemetryMsg.msgraw += row;
        StateHasChanged();
    }

    void Log(TelemetryMsg telemetryMsg,object omsg, object omsg2, object omsg3)
    {
        string msg = string.Format("{0}",omsg);
        string msg2 = string.Format("{0}",omsg2);
        string msg3 = string.Format("{0}",omsg3);
        string row = "<tr>" + "<td>"  + msg + "</td>" + "<td>" + msg2 + "</td>" + "<td>" + msg3 + "</td>" + "</tr>\n";
        telemetryMsg.msgraw += row;
        StateHasChanged();
    }

        void Log(TelemetryMsg telemetryMsg,object omsg, object omsg2, object omsg3, object omsg4)
    {
        string msg = string.Format("{0}",omsg);
        string msg2 = string.Format("{0}",omsg2);
        string msg3 = string.Format("{0}",omsg3);
        string msg4 = string.Format("{0}",omsg4);
        string row= "<tr>" + "<td>"  + msg + ":</td>" + "<td>" + msg2 + "</td>" + "<td>" + msg3 + "</td>" + "<td>" + msg4 + "</td>" + "</tr>\n";
        telemetryMsg.msgraw += row;
        StateHasChanged();
    }

    void Log4(TelemetryMsg telemetryMsg, object omsg, object omsg2, object omsg3, object omsg4)
    {
        string msg = string.Format("{0}",omsg);
        string msg2 = string.Format("{0}",omsg2);
        string msg3 = string.Format("{0}",omsg3);
        string msg4 = string.Format("{0}",omsg4);
        string row = "<tr>" + "<td>"  + msg + "</td>" + "<td><table><tr><td>" + msg2 + "</td><td align=\"right\">" + msg3 + "</td></tr></table></td>" + "<td>" + msg4 + "</td>" + "</tr>\n";
        telemetryMsg.msgraw += row;
        StateHasChanged();
    }

    public class TelemetryMsg
    {
        public Int64 TimeStamp { get; set; }
        public string msgraw { get; set; } 
        public MarkupString Markup  { get { return new MarkupString(msgraw); } }
    }

}
