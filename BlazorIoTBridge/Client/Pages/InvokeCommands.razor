@page "/invokecommands"

@using BlazorIoTBridge.Shared
@inject HttpClient client
@inject IJSRuntime JSRuntime

<h1>Invoke Commands on Device via the Hub</h1>

@*<button class="btn btn-primary" @onclick="StartReads">Send Command</button><br />
Command:&nbsp;<input type="text" @bind="@command"/><br />
Parameter:&nbsp;<input type="text" @bind="@value"/> <br />*@

<table>
    <tr><td colspan="2"><button class="btn btn-primary" @onclick="DoCommand">Send Command:</button></td></tr>
     <tr><td>Type Command:&nbsp;</td><td><input type="text"  @onkeydown="@Enter" @bind:event="oninput" @bind="@command"/></td></tr>
     <tr>
        <td>Or Select Command:&nbsp;</td>
       <td>
           @if(@RegCmdz!= null)
            {
                @if (showmenu)
                {
                    <select @onchange="OnSelectedCommand"  >
                        <option value=""><i>Select</i></option>
                        
                        @foreach (var cmd in RegCmdz)
                        {
                            <option value=@cmd><b>@cmd</b></option>
                        }                  

                    </select>
                }
            }
       </td>
   </tr>
      <tr><td>Parameter:&nbsp;</td><td><input type="text" @bind="@value"/></td></tr>

        <tr><td colspan="2"><button class="btn btn-primary" @onclick="GetRegisteredCommands">Get Registered Commands for Device/button</button></td></tr>
</table>

<br />@((MarkupString)Response)
<br />
<tabls>
    <tr>
        <td>
        @if (commands != null) 
            {
                @if (commands.Count() != 0)
                {
                    <h3>Log of Commands Queue direct to Device</h3>
                    <table class="t1">
                        <tr>
                        <th>Action</th>
                        <th>Parameter</th>
                        </tr>
                    @foreach (var @cmd in commands)
                    {
                         <tr>
                             <td>@cmd.Action</td>
                                @if (cmd.Parameter != iNull )
                                {
                                    <td>@cmd.Parameter</td>
                                }
                                else
                                {
                                    <td>&nbsp;</td>
                                }
                        </tr>
                    }
                    </table>
                }
            }         
        </td>
    </tr>
</tabls>


@code {

    //private string MiscCommandsCsvString = "STOPLISTENING,STARTLISTENING,LISTCOMMANDS";
    //private List<string> MiscCommands = null;
    private int currentCount = 0;
    private string command { get; set; } = "";
    private string value { get; set; } = "10";
    bool run = true;
    string Response = "";
    private bool showmenu = true;

    System.Threading.Timer timer;
    List<Command> commands = null;
    List<Command> commandsWaiting = null;

    int iNull = (int)BlazorIoTBridge.Shared.Sensor.iNull;
    string RegisteredCommands;
    List<string> RegCmdz = null;

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if ((command != "Select") && (command !=""))
            {
                await DoCommand();
            }
        }
    }

    async Task OnSelectedCommand(ChangeEventArgs e)
    {
        command = e.Value.ToString();
        if ((command != "Select") && (command != ""))
        {
            await DoCommand();
        }
    }

    private async Task DoCommand()
    {
        if ((command == "Select") || (command == ""))
            return;
        Response = "Busy";
        StateHasChanged();
        BlazorIoTBridge.Shared.Command cmd;

        int val;

        if (command[0] == '*')
        {
            //Commands that require a parameter have a leading * in name.
            if (int.TryParse(value, out val))
                cmd = new BlazorIoTBridge.Shared.Command { Action = command.Substring(1), Parameter = val };
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", new string[] { "Command requires a parameter" });
                cmd = null;
            }
        }
        else
        {         
            // Some commands have an optional parameter 
            if (int.TryParse(value, out val))
                cmd = new BlazorIoTBridge.Shared.Command { Action = command, Parameter = val };
            else
                cmd = new BlazorIoTBridge.Shared.Command { Action = command };
        }
        if (cmd != null)
        {

            cmd.Invoke = true;
            bool notDone = true;
            int count = 1;
            Response = $"Sending {cmd.Action} ... ";
            int numTries = 5;
            int delay = 2000;
            StateHasChanged();
            do
            {
                var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("CommandsViaHub", cmd, null);
                command = "";
                value = "";

                string content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    if (count == 1)
                    {
                        System.Diagnostics.Debug.WriteLine("Sent Command OK");
                        Response += $"Sent Command Ok<br/>";
                    }
                    else
                    {                 
                        System.Diagnostics.Debug.WriteLine("$Sent Command OK. Took {count -1} retries.");
                        Response += "$Sent Command OK. Took {count -1} retries.<br/>";
                    }
                    notDone = false;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("Not OK: {0} {1}", (int)response.StatusCode, response.ReasonPhrase);
                    Response += $"<br/>Command Not OK: {(int)response.StatusCode} {response.ReasonPhrase}";
                    Response += $"<br/>{content}";
                    
                    notDone = true;
                    if (count < numTries)
                    {
                        Response += $"<br>Trying again in {delay} mS. Try {count}/{numTries}";
                        System.Diagnostics.Debug.WriteLine($"Trying again in {delay} mS. Try {count}/{numTries}");
                    }
                    else
                    {
                        Response += "<br/>No more tries.";
                        System.Diagnostics.Debug.WriteLine("No more tries.");
                    }
                    StateHasChanged();
                    count++;
                    delay += 1000;
                    System.Threading.Thread.Sleep(delay);
                }
                StateHasChanged();
            } while (notDone && (count <= numTries ));
        }
        cmd = null;
        Command[] bak = commands.ToArray();
        commands = null;
        showmenu = false;
        StateHasChanged();
        commands = new List<Command>();
        commands.AddRange(bak);
        showmenu = true;
        StateHasChanged();
    }

    private  void SetClock(object stateInfo)
	{
            GetCommands().GetAwaiter();
            StateHasChanged();
	}

    void startTimer(int secs)
    {
        timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 0, secs*1000);
    }

    void stopTimer()
    {
        timer.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetRegisteredCommands();
        Response = "";
        startTimer(1);
        commands = new List<Command>();
        commandsWaiting = new List<Command>();
    }

        

    private async Task GetCommands()
    {
        var response = await client.GetFromJsonAsync<Command[]>("CommansdsDirectFromHub");
        if (response != null)
            commands = response.ToList();
        else
            commands = null;
    }
  
    private async Task GetRegisteredCommands()
    {
        RegCmdz=null;
        BlazorIoTBridge.Shared.Command cmd = new BlazorIoTBridge.Shared.Command { Action = "LISTCOMMANDS" , Invoke = true};
        var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("CommandsViaHub", cmd,null);
        RegisteredCommands = await response.Content.ReadAsStringAsync();
        RegCmdz = RegisteredCommands.Split(',').ToList<string>();
        StateHasChanged();
    }

}
