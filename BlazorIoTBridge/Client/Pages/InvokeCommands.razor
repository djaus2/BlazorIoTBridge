@page "/invokecommands"

@using BlazorIoTBridge.Shared
@inject HttpClient client
@inject IJSRuntime JSRuntime


<h1>Commands</h1>
<table style="width:100%;">
	<col style="width:25%">
	<col style="width:50%">
    <col style="width:25%">
    <tr><td><button class="btn btn-primary" @onclick="DoCommand">Send Command:</button></td></tr>
    <tr><td>Enter Device Id as a Guid:&nbsp;</td><td colspan="2"><input type="text" style="width:320px;" @bind:event="oninput" @bind="@IdGuid"/></td></tr>
    <tr><td><i>Or Select Device:&nbsp;</i></td>
    <td colspan="2">
        @if(@DeviceIds!= null)
        {
            @if (showmenu)
            {
                <select @onchange="OnSelectedId"  >
                    <option value=""><i>Select</i></option>
                        
                    @foreach (var dev in DeviceIds)
                    {
                        <option value=@dev><b>@dev</b></option>
                    }
                </select>
            }
        }
    </td></tr>
     <tr><td>Enter Command:&nbsp;</td><td><input type="text" @onkeydown="@Enter" @bind="@command"/></td></tr>

     <tr><td><i>Or Select Command:&nbsp;</i></td>
       <td>
           @if(@RegCmdz!= null)
            {
                @if (showmenu)
                {
                    <select @onchange="OnSelectedCommand"  >
                        <option value=""><i>Select</i></option>
                        
                        @foreach (var cmd in RegCmdz)
                        {
                            <option value=@cmd><b>@cmd</b></option>
                        }
                    </select>
                }
            }
       </td></tr>
      <tr><td>Parameter:&nbsp;</td><td><input type="text" @bind="@value"/></td></tr>

        <tr><td colspan="2"><button class="btn btn-primary" @onclick="GetRegisteredCommands">Get Registered Commands for Device/button</button></td></tr>
</table>

<br />@((MarkupString)Response)

@if (commands != null)
{
    @if (commands.Count() != 0)
    {
        <h3>Commands Queue direct to Device</h3>
        <table class="t1">
            <tr>
            <th>Action</th>
            <th>Parameter</th>
            </tr>
        @foreach (var @cmd in @commands)
        {
             <tr>
                 <td>@cmd.Action</td>
                    @if (cmd.Parameter != iNull )
                    {
                        <td>@cmd.Parameter</td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                    }
            </tr>
        }
        </table>
    }
}


@code {

    //private string MiscCommandsCsvString = "STOPLISTENING,STARTLISTENING,LISTCOMMANDS";
    //private List<string> MiscCommands = null;
    private int currentCount = 0;
    private string command { get; set; } = "";
    private string value { get; set; } = "10";
    bool run = true;
    string Response = "";



    List<Command> commands = null;
    List<Command> commandsWaiting = null;

    int iNull = Sensor.iNull;
    string RegisteredCommands;
    List<string> RegCmdz = null;
    bool showmenu = true;
    private string IdGuid = "";
    List<Guid> DeviceIds = null;

    System.Threading.Timer timer;

    public async Task Enter(KeyboardEventArgs e)
    {
        if (e.Code == "Enter" || e.Code == "NumpadEnter")
        {
            if ((command != "Select") && (command !=""))
            {
                await DoCommand();
            }
        }
    }

    async Task OnSelectedCommand(ChangeEventArgs e)
    {
        command = e.Value.ToString();
        if ((command != "Select") && (command != ""))
        {
            await DoCommand();
        }
    }
    async Task OnSelectedId(ChangeEventArgs e)
    {
        IdGuid = e.Value.ToString();
    }

    private async Task DoCommand()
    {
        if ((command == "Select") || (command == ""))
            return;
        Response = "Busy";
        StateHasChanged();
        Command cmd=null;

        int val;

        if (command[0] == '*')
        {
            //command = command.Substring(1);
            //Commands that require a parameter have a leading * in name.
            if (int.TryParse(value, out val))
                cmd = new Command { Id = IdGuid, Action = command, Parameter = val };
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", new string[] { "Command requires a parameter" });
                cmd = null;
            }
        }
        else
        {         
            // Some commands have an optional parameter 
            if (int.TryParse(value, out val))
                cmd = new Command { Id = IdGuid, Action = command, Parameter = val };
            else
                cmd = new Command { Id = IdGuid, Action = command };
        }
        if (cmd != null)
        {

            cmd.Invoke = true;
            bool notDone = true;
            int count = 1;
            Response = $"Sending {cmd.Action} ... ";
            int numTries = 5;
            int delay = 2000;
            StateHasChanged();
            do
            {
                var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("CommandsViaHub", cmd, null);
                command = "";
                value = "";

                string content = await response.Content.ReadAsStringAsync();
                if (response.IsSuccessStatusCode)
                {
                    if (count == 1)
                    {
                        System.Diagnostics.Debug.WriteLine("Sent Command OK");
                        Response += $"Sent Command Ok<br/>";
                    }
                    else
                    {                 
                        System.Diagnostics.Debug.WriteLine($"Finally ... Sent Command OK. Took {count -1} retries.");
                        Response = $"Finally ... Sent Command {cmd.Action} OK. Took {count -1} retries.<br/>";
                    }
                    notDone = false;
                }
                else
                {
                    System.Diagnostics.Debug.WriteLine("Not OK: {0} {1}", (int)response.StatusCode, response.ReasonPhrase);
                    Response += $"<br/>Command Not OK: {(int)response.StatusCode} {response.ReasonPhrase}";
                    Response += $"<br/>{content}";
                    
                    notDone = true;
                    if (count < numTries)
                    {
                        Response += $"<br>Trying again in {delay} mS. Try {count}/{numTries}";
                        System.Diagnostics.Debug.WriteLine($"Trying again in {delay} mS. Try {count}/{numTries}");
                    }
                    else
                    {
                        Response += "<br/>No more tries.";
                        System.Diagnostics.Debug.WriteLine("No more tries.");
                    }
                    StateHasChanged();
                    count++;
                    delay += 1000;
                    System.Threading.Thread.Sleep(delay);
                }
                StateHasChanged();
            } while (notDone && (count <= numTries ));
        }
        cmd = null;
        Command[] bak = commands.ToArray();
        commands = null;
        showmenu = false;
        StateHasChanged();
        commands = new List<Command>();
        commands.AddRange(bak);
        showmenu = true;
        StateHasChanged();
    }

    private  void SetClock(object stateInfo)
	{
            GetCommands().GetAwaiter();
            StateHasChanged();
	}

    void startTimer(int secs)
    {
        timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 0, secs*1000);
    }

    void stopTimer()
    {
        timer.Dispose();
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetRegisteredCommands();
        Response = "";
        startTimer(1);
        commands = new List<Command>();
        commandsWaiting = new List<Command>();
    }

        

    private async Task GetCommands()
    {
        var response = await client.GetFromJsonAsync<Command[]>("CommansdsDirectFromHub");
        if (response != null)
            commands = response.ToList();
        else
            commands = null;
    }
  
    private async Task GetRegisteredCommands()
    {
        RegCmdz=null;
        BlazorIoTBridge.Shared.Command cmd = new BlazorIoTBridge.Shared.Command { Action = "LISTCOMMANDS" , Invoke = true};
        var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("CommandsViaHub", cmd,null);
        RegisteredCommands = await response.Content.ReadAsStringAsync();
        RegCmdz = RegisteredCommands.Split(',').ToList<string>();
        
        var DeviceIdsArray = await client.GetFromJsonAsync<Guid[]>("Info");
        DeviceIds = new List<Guid>(DeviceIdsArray);
        if (DeviceIds != null)
            if (DeviceIds.Count() == 1)
                IdGuid = DeviceIds[0].ToString();
        StateHasChanged();
    }

}
