@page "/commands"
@using BlazorIoTBridge.Shared
@inject HttpClient client
@inject IJSRuntime JSRuntime

<h1>Commands</h1>
<table>
    <tr><td colspan="2"><button class="btn btn-primary" @onclick="DoCommand">Send Command:</button></td></tr>
     <tr><td>Type Command:&nbsp;</td><td><input type="text" @onkeydown="@Enter" @bind="@command"/></td></tr>
     <tr><td>Or Select Command:&nbsp;</td>
       <td>
           @if(@RegCmdz!= null)
            {
                @if (showmenu)
                {
                    <select @onchange="OnSelectedCommand"  >
                        <option value=""><i>Select</i></option>
                        
                        @foreach (var cmd in RegCmdz)
                        {
                            <option value=@cmd><b>@cmd</b></option>
                        }
                    </select>
                }
            }
       </td></tr>
      <tr><td>Parameter:&nbsp;</td><td><input type="text" @bind="@value"/></td></tr>

        <tr><td colspan="2"><button class="btn btn-primary" @onclick="GetRegisteredCommands">Get Registered Commands for Device/button</button></td></tr>
</table>

<br />@((MarkupString)Response)

@if (commands != null)
{
    @if (commands.Count() != 0)
    {
        <h3>Commands Queue direct to Device</h3>
        <table class="t1">
            <tr>
            <th>Action</th>
            <th>Parameter</th>
            </tr>
        @foreach (var @cmd in @commands)
        {
             <tr>
                 <td>@cmd.Action</td>
                    @if (cmd.Parameter != iNull )
                    {
                        <td>@cmd.Parameter</td>
                    }
                    else
                    {
                        <td>&nbsp;</td>
                    }
            </tr>
        }
        </table>
    }
}

@code {
    private int currentCount = 0;
    private string command { get; set; } = "";
    private string value { get; set; } = "";
    bool run = true;
    string Response = "";
    List<Command> commands = null;
    int iNull = (int)BlazorIoTBridge.Shared.Sensor.iNull;
    string RegisteredCommands;
    List<string> RegCmdz = null;
    bool showmenu = true;

    System.Threading.Timer timer;

public async Task Enter(KeyboardEventArgs e)
{
    if (e.Code == "Enter" || e.Code == "NumpadEnter")
    {
        if ((command != "Select") && (command !=""))
        {
            await DoCommand();
        }
    }

}


    private  void SetClock(object stateInfo)
	{
        GetCommands().GetAwaiter();
        StateHasChanged();
	}
 
    void startTimer(int secs)
    {
        timer = new System.Threading.Timer(SetClock, new System.Threading.AutoResetEvent(false), 0, secs*1000);
    }

    void stopTimer()
    {
        timer.Dispose();
    }

    protected override async Task OnAfterRenderAsync( bool first)
    {
        await base.OnAfterRenderAsync(first);
        if (first)
        {
            
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        await GetRegisteredCommands();
        Response = "";
        startTimer(1);
    }

    async Task OnSelectedCommand(ChangeEventArgs e)
    {
        command = e.Value.ToString();
        if ((command != "Select") && (command !=""))
        {
            await DoCommand();
        }
    }

    private async Task DoCommand()
    {
        if ((command == "Select") || (command == ""))
            return;
        Response = "Busy";
        int val;
        BlazorIoTBridge.Shared.Command cmd;
        if (command[0] == '*')
        {
            //Commands that require a parameter have a leading * in name.
            if (int.TryParse(value, out val))
                cmd = new BlazorIoTBridge.Shared.Command { Action = command, Parameter = val };
            else
            {
                await JSRuntime.InvokeVoidAsync("alert", new string[] { "Command requires a parameter" });
                cmd = null;
            }
        }
        else
        {
            // Some commands have an optional parameter 
            if (int.TryParse(value, out val))
                cmd = new BlazorIoTBridge.Shared.Command { Action = command, Parameter = val };
            else
                cmd = new BlazorIoTBridge.Shared.Command { Action = command };
        }
		if (cmd != null)	
        {
            var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("Commands2Device", cmd, null);
            command = "";
            value = "";
            cmd = null;
            string content = await response.Content.ReadAsStringAsync();
            if (response.IsSuccessStatusCode)
            {
                System.Diagnostics.Debug.WriteLine("Sent OK");
                Response = $"Sent Ok<br/>{content}";
            }
            else
            {
                System.Diagnostics.Debug.WriteLine("Not OK: {0}", response.ReasonPhrase);
                Response = $"Not OK: {response.ReasonPhrase}";
                Response += $"<br/>{content}";
            }
        }
        Command[] bak = commands.ToArray();
        commands = null;
        showmenu = false;
        StateHasChanged();
        commands = new List<Command>();
        commands.AddRange(bak);
        showmenu = true;
        StateHasChanged();
    }

    private async Task GetCommands()
    {
        var response = await client.GetFromJsonAsync<Command[]>("CommandsViaHub");
        if (response != null)
        {
            commands = response.ToList();

        }
        else
            commands = null;
    }
  
    private async Task GetRegisteredCommands()
    {
        RegCmdz=null;
        BlazorIoTBridge.Shared.Command cmd = new BlazorIoTBridge.Shared.Command { Action = "LISTCOMMANDS" , Invoke = true};
        var response = await client.PostAsJsonAsync<BlazorIoTBridge.Shared.Command>("CommandsViaHub", cmd,null);
        RegisteredCommands = await response.Content.ReadAsStringAsync();
        RegCmdz = RegisteredCommands.Split(',').ToList<string>();
        RegCmdz.Add("");
        RegCmdz.Add("Send Telemetry direct to hub");
        RegCmdz.Add("Send Telemetry via here");
        StateHasChanged();
    }



}
